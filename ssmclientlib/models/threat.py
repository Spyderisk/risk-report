# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.

    The version of the OpenAPI document: v3.5.0
    Contact: info@spyderisk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ssmclientlib.models.control_strategy import ControlStrategy
from ssmclientlib.models.level import Level
from ssmclientlib.models.misbehaviour_set import MisbehaviourSet
from ssmclientlib.models.pattern import Pattern
from ssmclientlib.models.trustworthiness_attribute_set import TrustworthinessAttributeSet
from typing import Optional, Set
from typing_extensions import Self

class Threat(BaseModel):
    """
    Threat
    """ # noqa: E501
    uri: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    parents: Optional[List[StrictStr]] = None
    pattern: Optional[Pattern] = None
    threatens_assets: Optional[StrictStr] = Field(default=None, alias="threatensAssets")
    type: Optional[StrictStr] = None
    acceptance_justification: Optional[StrictStr] = Field(default=None, alias="acceptanceJustification")
    control_strategies: Optional[Dict[str, ControlStrategy]] = Field(default=None, alias="controlStrategies")
    resolved: Optional[StrictBool] = None
    misbehaviours: Optional[Dict[str, MisbehaviourSet]] = None
    indirect_effects: Optional[Dict[str, MisbehaviourSet]] = Field(default=None, alias="indirectEffects")
    secondary_threat: Optional[StrictBool] = Field(default=None, alias="secondaryThreat")
    normal_operation: Optional[StrictBool] = Field(default=None, alias="normalOperation")
    secondary_effect_conditions: Optional[Dict[str, MisbehaviourSet]] = Field(default=None, alias="secondaryEffectConditions")
    entry_points: Optional[Dict[str, TrustworthinessAttributeSet]] = Field(default=None, alias="entryPoints")
    frequency: Optional[Level] = None
    likelihood: Optional[Level] = None
    risk_level: Optional[Level] = Field(default=None, alias="riskLevel")
    root_cause: Optional[StrictBool] = Field(default=None, alias="rootCause")
    id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["uri", "label", "description", "parents", "pattern", "threatensAssets", "type", "acceptanceJustification", "controlStrategies", "resolved", "misbehaviours", "indirectEffects", "secondaryThreat", "normalOperation", "secondaryEffectConditions", "entryPoints", "frequency", "likelihood", "riskLevel", "rootCause", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Threat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pattern
        if self.pattern:
            _dict['pattern'] = self.pattern.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in control_strategies (dict)
        _field_dict = {}
        if self.control_strategies:
            for _key_control_strategies in self.control_strategies:
                if self.control_strategies[_key_control_strategies]:
                    _field_dict[_key_control_strategies] = self.control_strategies[_key_control_strategies].to_dict()
            _dict['controlStrategies'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in misbehaviours (dict)
        _field_dict = {}
        if self.misbehaviours:
            for _key_misbehaviours in self.misbehaviours:
                if self.misbehaviours[_key_misbehaviours]:
                    _field_dict[_key_misbehaviours] = self.misbehaviours[_key_misbehaviours].to_dict()
            _dict['misbehaviours'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in indirect_effects (dict)
        _field_dict = {}
        if self.indirect_effects:
            for _key_indirect_effects in self.indirect_effects:
                if self.indirect_effects[_key_indirect_effects]:
                    _field_dict[_key_indirect_effects] = self.indirect_effects[_key_indirect_effects].to_dict()
            _dict['indirectEffects'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in secondary_effect_conditions (dict)
        _field_dict = {}
        if self.secondary_effect_conditions:
            for _key_secondary_effect_conditions in self.secondary_effect_conditions:
                if self.secondary_effect_conditions[_key_secondary_effect_conditions]:
                    _field_dict[_key_secondary_effect_conditions] = self.secondary_effect_conditions[_key_secondary_effect_conditions].to_dict()
            _dict['secondaryEffectConditions'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in entry_points (dict)
        _field_dict = {}
        if self.entry_points:
            for _key_entry_points in self.entry_points:
                if self.entry_points[_key_entry_points]:
                    _field_dict[_key_entry_points] = self.entry_points[_key_entry_points].to_dict()
            _dict['entryPoints'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of frequency
        if self.frequency:
            _dict['frequency'] = self.frequency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of likelihood
        if self.likelihood:
            _dict['likelihood'] = self.likelihood.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_level
        if self.risk_level:
            _dict['riskLevel'] = self.risk_level.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Threat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "parents": obj.get("parents"),
            "pattern": Pattern.from_dict(obj["pattern"]) if obj.get("pattern") is not None else None,
            "threatensAssets": obj.get("threatensAssets"),
            "type": obj.get("type"),
            "acceptanceJustification": obj.get("acceptanceJustification"),
            "controlStrategies": dict(
                (_k, ControlStrategy.from_dict(_v))
                for _k, _v in obj["controlStrategies"].items()
            )
            if obj.get("controlStrategies") is not None
            else None,
            "resolved": obj.get("resolved"),
            "misbehaviours": dict(
                (_k, MisbehaviourSet.from_dict(_v))
                for _k, _v in obj["misbehaviours"].items()
            )
            if obj.get("misbehaviours") is not None
            else None,
            "indirectEffects": dict(
                (_k, MisbehaviourSet.from_dict(_v))
                for _k, _v in obj["indirectEffects"].items()
            )
            if obj.get("indirectEffects") is not None
            else None,
            "secondaryThreat": obj.get("secondaryThreat"),
            "normalOperation": obj.get("normalOperation"),
            "secondaryEffectConditions": dict(
                (_k, MisbehaviourSet.from_dict(_v))
                for _k, _v in obj["secondaryEffectConditions"].items()
            )
            if obj.get("secondaryEffectConditions") is not None
            else None,
            "entryPoints": dict(
                (_k, TrustworthinessAttributeSet.from_dict(_v))
                for _k, _v in obj["entryPoints"].items()
            )
            if obj.get("entryPoints") is not None
            else None,
            "frequency": Level.from_dict(obj["frequency"]) if obj.get("frequency") is not None else None,
            "likelihood": Level.from_dict(obj["likelihood"]) if obj.get("likelihood") is not None else None,
            "riskLevel": Level.from_dict(obj["riskLevel"]) if obj.get("riskLevel") is not None else None,
            "rootCause": obj.get("rootCause"),
            "id": obj.get("id")
        })
        return _obj


