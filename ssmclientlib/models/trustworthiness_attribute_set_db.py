# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.

    The version of the OpenAPI document: v3.5.0
    Contact: info@spyderisk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TrustworthinessAttributeSetDB(BaseModel):
    """
    TrustworthinessAttributeSetDB
    """ # noqa: E501
    uri: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    trustworthiness_attribute: Optional[StrictStr] = Field(default=None, alias="trustworthinessAttribute")
    located_at: Optional[StrictStr] = Field(default=None, alias="locatedAt")
    asserted_level: Optional[StrictStr] = Field(default=None, alias="assertedLevel")
    inferred_level: Optional[StrictStr] = Field(default=None, alias="inferredLevel")
    external_cause: Optional[StrictBool] = Field(default=None, alias="externalCause")
    caused_threats: Optional[List[StrictStr]] = Field(default=None, alias="causedThreats")
    min_of: Optional[StrictStr] = Field(default=None, alias="minOf")
    max_of: Optional[StrictStr] = Field(default=None, alias="maxOf")
    has_min: Optional[StrictStr] = Field(default=None, alias="hasMin")
    has_max: Optional[StrictStr] = Field(default=None, alias="hasMax")
    __properties: ClassVar[List[str]] = ["uri", "type", "id", "trustworthinessAttribute", "locatedAt", "assertedLevel", "inferredLevel", "externalCause", "causedThreats", "minOf", "maxOf", "hasMin", "hasMax"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrustworthinessAttributeSetDB from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrustworthinessAttributeSetDB from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "type": obj.get("type"),
            "id": obj.get("id"),
            "trustworthinessAttribute": obj.get("trustworthinessAttribute"),
            "locatedAt": obj.get("locatedAt"),
            "assertedLevel": obj.get("assertedLevel"),
            "inferredLevel": obj.get("inferredLevel"),
            "externalCause": obj.get("externalCause"),
            "causedThreats": obj.get("causedThreats"),
            "minOf": obj.get("minOf"),
            "maxOf": obj.get("maxOf"),
            "hasMin": obj.get("hasMin"),
            "hasMax": obj.get("hasMax")
        })
        return _obj


