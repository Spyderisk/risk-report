# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.

    The version of the OpenAPI document: v3.5.0
    Contact: info@spyderisk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from ssmclientlib.models.control_db import ControlDB
from ssmclientlib.models.control_set_db import ControlSetDB
from ssmclientlib.models.level_db import LevelDB
from ssmclientlib.models.misbehaviour_db import MisbehaviourDB
from ssmclientlib.models.misbehaviour_set_db import MisbehaviourSetDB
from ssmclientlib.models.model_db import ModelDB
from ssmclientlib.models.threat_db import ThreatDB
from ssmclientlib.models.trustworthiness_attribute_set_db import TrustworthinessAttributeSetDB
from typing import Optional, Set
from typing_extensions import Self

class RiskCalcResultsDB(BaseModel):
    """
    RiskCalcResultsDB
    """ # noqa: E501
    model: Optional[ModelDB] = None
    threats: Optional[Dict[str, ThreatDB]] = None
    misbehaviour_sets: Optional[Dict[str, MisbehaviourSetDB]] = Field(default=None, alias="misbehaviourSets")
    twas: Optional[Dict[str, TrustworthinessAttributeSetDB]] = None
    cs: Optional[Dict[str, ControlSetDB]] = None
    levels: Optional[Dict[str, Dict[str, LevelDB]]] = None
    misbehaviours: Optional[Dict[str, MisbehaviourDB]] = None
    controls: Optional[Dict[str, ControlDB]] = None
    __properties: ClassVar[List[str]] = ["model", "threats", "misbehaviourSets", "twas", "cs", "levels", "misbehaviours", "controls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RiskCalcResultsDB from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in threats (dict)
        _field_dict = {}
        if self.threats:
            for _key_threats in self.threats:
                if self.threats[_key_threats]:
                    _field_dict[_key_threats] = self.threats[_key_threats].to_dict()
            _dict['threats'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in misbehaviour_sets (dict)
        _field_dict = {}
        if self.misbehaviour_sets:
            for _key_misbehaviour_sets in self.misbehaviour_sets:
                if self.misbehaviour_sets[_key_misbehaviour_sets]:
                    _field_dict[_key_misbehaviour_sets] = self.misbehaviour_sets[_key_misbehaviour_sets].to_dict()
            _dict['misbehaviourSets'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in twas (dict)
        _field_dict = {}
        if self.twas:
            for _key_twas in self.twas:
                if self.twas[_key_twas]:
                    _field_dict[_key_twas] = self.twas[_key_twas].to_dict()
            _dict['twas'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in cs (dict)
        _field_dict = {}
        if self.cs:
            for _key_cs in self.cs:
                if self.cs[_key_cs]:
                    _field_dict[_key_cs] = self.cs[_key_cs].to_dict()
            _dict['cs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in levels (dict)
        _field_dict = {}
        if self.levels:
            for _key_levels in self.levels:
                if self.levels[_key_levels]:
                    _field_dict[_key_levels] = self.levels[_key_levels].to_dict()
            _dict['levels'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in misbehaviours (dict)
        _field_dict = {}
        if self.misbehaviours:
            for _key_misbehaviours in self.misbehaviours:
                if self.misbehaviours[_key_misbehaviours]:
                    _field_dict[_key_misbehaviours] = self.misbehaviours[_key_misbehaviours].to_dict()
            _dict['misbehaviours'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in controls (dict)
        _field_dict = {}
        if self.controls:
            for _key_controls in self.controls:
                if self.controls[_key_controls]:
                    _field_dict[_key_controls] = self.controls[_key_controls].to_dict()
            _dict['controls'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RiskCalcResultsDB from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model": ModelDB.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "threats": dict(
                (_k, ThreatDB.from_dict(_v))
                for _k, _v in obj["threats"].items()
            )
            if obj.get("threats") is not None
            else None,
            "misbehaviourSets": dict(
                (_k, MisbehaviourSetDB.from_dict(_v))
                for _k, _v in obj["misbehaviourSets"].items()
            )
            if obj.get("misbehaviourSets") is not None
            else None,
            "twas": dict(
                (_k, TrustworthinessAttributeSetDB.from_dict(_v))
                for _k, _v in obj["twas"].items()
            )
            if obj.get("twas") is not None
            else None,
            "cs": dict(
                (_k, ControlSetDB.from_dict(_v))
                for _k, _v in obj["cs"].items()
            )
            if obj.get("cs") is not None
            else None,
            "levels": dict(
                (_k, dict(
                    (_ik, LevelDB.from_dict(_iv))
                        for _ik, _iv in _v.items()
                    )
                    if _v is not None
                    else None
                )
                for _k, _v in obj.get("levels").items()
            )
            if obj.get("levels") is not None
            else None,
            "misbehaviours": dict(
                (_k, MisbehaviourDB.from_dict(_v))
                for _k, _v in obj["misbehaviours"].items()
            )
            if obj.get("misbehaviours") is not None
            else None,
            "controls": dict(
                (_k, ControlDB.from_dict(_v))
                for _k, _v in obj["controls"].items()
            )
            if obj.get("controls") is not None
            else None
        })
        return _obj


