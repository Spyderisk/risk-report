# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.

    The version of the OpenAPI document: v3.5.0
    Contact: info@spyderisk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ssmclientlib.models.control_set import ControlSet
from ssmclientlib.models.metadata_pair import MetadataPair
from ssmclientlib.models.misbehaviour_set import MisbehaviourSet
from ssmclientlib.models.trustworthiness_attribute_set import TrustworthinessAttributeSet
from typing import Optional, Set
from typing_extensions import Self

class Asset(BaseModel):
    """
    Asset
    """ # noqa: E501
    uri: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    parents: Optional[List[StrictStr]] = None
    type: Optional[StrictStr] = None
    asserted: Optional[StrictBool] = None
    visible: Optional[StrictBool] = None
    icon_x: Optional[StrictInt] = Field(default=None, alias="iconX")
    icon_y: Optional[StrictInt] = Field(default=None, alias="iconY")
    min_cardinality: Optional[StrictInt] = Field(default=None, alias="minCardinality")
    max_cardinality: Optional[StrictInt] = Field(default=None, alias="maxCardinality")
    population: Optional[StrictStr] = None
    control_sets: Optional[Dict[str, ControlSet]] = Field(default=None, alias="controlSets")
    misbehaviour_sets: Optional[Dict[str, MisbehaviourSet]] = Field(default=None, alias="misbehaviourSets")
    inferred_assets: Optional[List[StrictStr]] = Field(default=None, alias="inferredAssets")
    trustworthiness_attribute_sets: Optional[Dict[str, TrustworthinessAttributeSet]] = Field(default=None, alias="trustworthinessAttributeSets")
    metadata: Optional[List[MetadataPair]] = None
    id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["uri", "label", "description", "parents", "type", "asserted", "visible", "iconX", "iconY", "minCardinality", "maxCardinality", "population", "controlSets", "misbehaviourSets", "inferredAssets", "trustworthinessAttributeSets", "metadata", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Asset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in control_sets (dict)
        _field_dict = {}
        if self.control_sets:
            for _key_control_sets in self.control_sets:
                if self.control_sets[_key_control_sets]:
                    _field_dict[_key_control_sets] = self.control_sets[_key_control_sets].to_dict()
            _dict['controlSets'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in misbehaviour_sets (dict)
        _field_dict = {}
        if self.misbehaviour_sets:
            for _key_misbehaviour_sets in self.misbehaviour_sets:
                if self.misbehaviour_sets[_key_misbehaviour_sets]:
                    _field_dict[_key_misbehaviour_sets] = self.misbehaviour_sets[_key_misbehaviour_sets].to_dict()
            _dict['misbehaviourSets'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in trustworthiness_attribute_sets (dict)
        _field_dict = {}
        if self.trustworthiness_attribute_sets:
            for _key_trustworthiness_attribute_sets in self.trustworthiness_attribute_sets:
                if self.trustworthiness_attribute_sets[_key_trustworthiness_attribute_sets]:
                    _field_dict[_key_trustworthiness_attribute_sets] = self.trustworthiness_attribute_sets[_key_trustworthiness_attribute_sets].to_dict()
            _dict['trustworthinessAttributeSets'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Asset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "parents": obj.get("parents"),
            "type": obj.get("type"),
            "asserted": obj.get("asserted"),
            "visible": obj.get("visible"),
            "iconX": obj.get("iconX"),
            "iconY": obj.get("iconY"),
            "minCardinality": obj.get("minCardinality"),
            "maxCardinality": obj.get("maxCardinality"),
            "population": obj.get("population"),
            "controlSets": dict(
                (_k, ControlSet.from_dict(_v))
                for _k, _v in obj["controlSets"].items()
            )
            if obj.get("controlSets") is not None
            else None,
            "misbehaviourSets": dict(
                (_k, MisbehaviourSet.from_dict(_v))
                for _k, _v in obj["misbehaviourSets"].items()
            )
            if obj.get("misbehaviourSets") is not None
            else None,
            "inferredAssets": obj.get("inferredAssets"),
            "trustworthinessAttributeSets": dict(
                (_k, TrustworthinessAttributeSet.from_dict(_v))
                for _k, _v in obj["trustworthinessAttributeSets"].items()
            )
            if obj.get("trustworthinessAttributeSets") is not None
            else None,
            "metadata": [MetadataPair.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "id": obj.get("id")
        })
        return _obj


