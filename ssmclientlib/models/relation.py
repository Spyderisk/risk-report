# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.

    The version of the OpenAPI document: v3.5.0
    Contact: info@spyderisk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Relation(BaseModel):
    """
    Relation
    """ # noqa: E501
    var_from: Optional[StrictStr] = Field(default=None, alias="from")
    from_id: Optional[StrictStr] = Field(default=None, alias="fromID")
    to: Optional[StrictStr] = None
    to_id: Optional[StrictStr] = Field(default=None, alias="toID")
    type: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    source_cardinality: Optional[StrictInt] = Field(default=None, alias="sourceCardinality")
    target_cardinality: Optional[StrictInt] = Field(default=None, alias="targetCardinality")
    asserted: Optional[StrictBool] = None
    visible: Optional[StrictBool] = None
    immutable: Optional[StrictBool] = None
    hidden: Optional[StrictBool] = None
    inferred_assets: Optional[List[StrictStr]] = Field(default=None, alias="inferredAssets")
    id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["from", "fromID", "to", "toID", "type", "label", "sourceCardinality", "targetCardinality", "asserted", "visible", "immutable", "hidden", "inferredAssets", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Relation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Relation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "from": obj.get("from"),
            "fromID": obj.get("fromID"),
            "to": obj.get("to"),
            "toID": obj.get("toID"),
            "type": obj.get("type"),
            "label": obj.get("label"),
            "sourceCardinality": obj.get("sourceCardinality"),
            "targetCardinality": obj.get("targetCardinality"),
            "asserted": obj.get("asserted"),
            "visible": obj.get("visible"),
            "immutable": obj.get("immutable"),
            "hidden": obj.get("hidden"),
            "inferredAssets": obj.get("inferredAssets"),
            "id": obj.get("id")
        })
        return _obj


