# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.

    The version of the OpenAPI document: v3.5.0
    Contact: info@spyderisk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ssmclientlib.models.level import Level
from typing import Optional, Set
from typing_extensions import Self

class ControlStrategyDTO(BaseModel):
    """
    ControlStrategyDTO
    """ # noqa: E501
    uri: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    blocking_effect: Optional[Level] = Field(default=None, alias="blockingEffect")
    enabled: Optional[StrictBool] = None
    mandatory_control_sets: Optional[List[StrictStr]] = Field(default=None, alias="mandatoryControlSets")
    optional_control_sets: Optional[List[StrictStr]] = Field(default=None, alias="optionalControlSets")
    threat_csg_types: Optional[Dict[str, StrictStr]] = Field(default=None, alias="threatCsgTypes")
    id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["uri", "label", "description", "blockingEffect", "enabled", "mandatoryControlSets", "optionalControlSets", "threatCsgTypes", "id"]

    @field_validator('threat_csg_types')
    def threat_csg_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value.values():
            if i not in set(['BLOCK', 'MITIGATE', 'TRIGGER']):
                raise ValueError("dict values must be one of enum values ('BLOCK', 'MITIGATE', 'TRIGGER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ControlStrategyDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of blocking_effect
        if self.blocking_effect:
            _dict['blockingEffect'] = self.blocking_effect.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ControlStrategyDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "blockingEffect": Level.from_dict(obj["blockingEffect"]) if obj.get("blockingEffect") is not None else None,
            "enabled": obj.get("enabled"),
            "mandatoryControlSets": obj.get("mandatoryControlSets"),
            "optionalControlSets": obj.get("optionalControlSets"),
            "threatCsgTypes": obj.get("threatCsgTypes"),
            "id": obj.get("id")
        })
        return _obj


