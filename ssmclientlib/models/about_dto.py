# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.

    The version of the OpenAPI document: v3.5.0
    Contact: info@spyderisk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ssmclientlib.models.about_link_dto import AboutLinkDTO
from typing import Optional, Set
from typing_extensions import Self

class AboutDTO(BaseModel):
    """
    AboutDTO
    """ # noqa: E501
    spyderisk_version: Optional[StrictStr] = Field(default=None, alias="spyderiskVersion")
    spyderisk_commit_sha: Optional[StrictStr] = Field(default=None, alias="spyderiskCommitSha")
    spyderisk_commit_timestamp: Optional[StrictStr] = Field(default=None, alias="spyderiskCommitTimestamp")
    spyderisk_adaptor_version: Optional[StrictStr] = Field(default=None, alias="spyderiskAdaptorVersion")
    website: Optional[AboutLinkDTO] = None
    license: Optional[AboutLinkDTO] = None
    contributors: Optional[AboutLinkDTO] = None
    __properties: ClassVar[List[str]] = ["spyderiskVersion", "spyderiskCommitSha", "spyderiskCommitTimestamp", "spyderiskAdaptorVersion", "website", "license", "contributors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AboutDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of website
        if self.website:
            _dict['website'] = self.website.to_dict()
        # override the default output from pydantic by calling `to_dict()` of license
        if self.license:
            _dict['license'] = self.license.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contributors
        if self.contributors:
            _dict['contributors'] = self.contributors.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AboutDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "spyderiskVersion": obj.get("spyderiskVersion"),
            "spyderiskCommitSha": obj.get("spyderiskCommitSha"),
            "spyderiskCommitTimestamp": obj.get("spyderiskCommitTimestamp"),
            "spyderiskAdaptorVersion": obj.get("spyderiskAdaptorVersion"),
            "website": AboutLinkDTO.from_dict(obj["website"]) if obj.get("website") is not None else None,
            "license": AboutLinkDTO.from_dict(obj["license"]) if obj.get("license") is not None else None,
            "contributors": AboutLinkDTO.from_dict(obj["contributors"]) if obj.get("contributors") is not None else None
        })
        return _obj


