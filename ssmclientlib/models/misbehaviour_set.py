# coding: utf-8

"""
    OpenAPI definition

    SPYDERISK System Modeller (SSM) REST API definitions for domain models, user system models and usage by other applications.

    The version of the OpenAPI document: v3.5.0
    Contact: info@spyderisk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ssmclientlib.models.level import Level
from typing import Optional, Set
from typing_extensions import Self

class MisbehaviourSet(BaseModel):
    """
    MisbehaviourSet
    """ # noqa: E501
    uri: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    parents: Optional[List[StrictStr]] = None
    misbehaviour: Optional[StrictStr] = None
    misbehaviour_label: Optional[StrictStr] = Field(default=None, alias="misbehaviourLabel")
    asset: Optional[StrictStr] = None
    asset_label: Optional[StrictStr] = Field(default=None, alias="assetLabel")
    visible: Optional[StrictBool] = None
    impact_level: Optional[Level] = Field(default=None, alias="impactLevel")
    likelihood: Optional[Level] = None
    risk_level: Optional[Level] = Field(default=None, alias="riskLevel")
    impact_level_asserted: Optional[StrictBool] = Field(default=None, alias="impactLevelAsserted")
    normal_op_effect: Optional[StrictBool] = Field(default=None, alias="normalOpEffect")
    direct_causes: Optional[List[StrictStr]] = Field(default=None, alias="directCauses")
    indirect_causes: Optional[List[StrictStr]] = Field(default=None, alias="indirectCauses")
    root_causes: Optional[List[StrictStr]] = Field(default=None, alias="rootCauses")
    direct_effects: Optional[List[StrictStr]] = Field(default=None, alias="directEffects")
    id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["uri", "label", "description", "parents", "misbehaviour", "misbehaviourLabel", "asset", "assetLabel", "visible", "impactLevel", "likelihood", "riskLevel", "impactLevelAsserted", "normalOpEffect", "directCauses", "indirectCauses", "rootCauses", "directEffects", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MisbehaviourSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of impact_level
        if self.impact_level:
            _dict['impactLevel'] = self.impact_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of likelihood
        if self.likelihood:
            _dict['likelihood'] = self.likelihood.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_level
        if self.risk_level:
            _dict['riskLevel'] = self.risk_level.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MisbehaviourSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uri": obj.get("uri"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "parents": obj.get("parents"),
            "misbehaviour": obj.get("misbehaviour"),
            "misbehaviourLabel": obj.get("misbehaviourLabel"),
            "asset": obj.get("asset"),
            "assetLabel": obj.get("assetLabel"),
            "visible": obj.get("visible"),
            "impactLevel": Level.from_dict(obj["impactLevel"]) if obj.get("impactLevel") is not None else None,
            "likelihood": Level.from_dict(obj["likelihood"]) if obj.get("likelihood") is not None else None,
            "riskLevel": Level.from_dict(obj["riskLevel"]) if obj.get("riskLevel") is not None else None,
            "impactLevelAsserted": obj.get("impactLevelAsserted"),
            "normalOpEffect": obj.get("normalOpEffect"),
            "directCauses": obj.get("directCauses"),
            "indirectCauses": obj.get("indirectCauses"),
            "rootCauses": obj.get("rootCauses"),
            "directEffects": obj.get("directEffects"),
            "id": obj.get("id")
        })
        return _obj


